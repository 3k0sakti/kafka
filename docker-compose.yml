version: '3.8'

services:
  # Zookeeper - Required for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
      KAFKA_TOOLS_LOG4J_LOGLEVEL: ERROR
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 40s

  # Apache Web Server (generates logs)
  apache:
    image: httpd:2.4
    container_name: apache-server
    ports:
      - "8080:80"
    volumes:
      - ./apache-logs:/usr/local/apache2/logs
      - ./apache-config/httpd.conf:/usr/local/apache2/conf/httpd.conf:ro
    networks:
      - kafka-network
    command: httpd-foreground

  # Producer - Reads Apache logs and sends to Kafka
  producer:
    build:
      context: .
      dockerfile: Dockerfile.producer
    container_name: kafka-producer
    depends_on:
      kafka:
        condition: service_healthy
      apache:
        condition: service_started
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_TOPIC: apache-logs
      LOG_FILE_PATH: /logs/access_log
    volumes:
      - ./apache-logs:/logs
    networks:
      - kafka-network
    restart: unless-stopped

  # Consumer - Reads from Kafka and prints line by line
  consumer:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    container_name: kafka-consumer
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_TOPIC: apache-logs
      KAFKA_GROUP_ID: apache-log-consumer-group
    networks:
      - kafka-network
    restart: unless-stopped

  # Log Generator - Simulates traffic to Apache
  log-generator:
    image: python:3.11-slim
    container_name: log-generator
    depends_on:
      - apache
    volumes:
      - ./scripts:/scripts
    working_dir: /scripts
    command: python generate_traffic.py
    networks:
      - kafka-network
    restart: unless-stopped

networks:
  kafka-network:
    driver: bridge

volumes:
  apache-logs:
